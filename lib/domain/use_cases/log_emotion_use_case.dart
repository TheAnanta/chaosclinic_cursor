import '../models/emotion_log.dart';
import '../../data/repositories/emotion_repository.dart';

/// Use case for logging emotions
class LogEmotionUseCase {
  final EmotionRepository _emotionRepository;

  LogEmotionUseCase(this._emotionRepository);

  /// Log a new emotion entry
  Future<bool> call(EmotionLog emotionLog) async {
    try {
      // Validate the emotion log
      final validationResult = _validateEmotionLog(emotionLog);
      if (!validationResult.isValid) {
        throw Exception('Invalid emotion log: ${validationResult.errorMessage}');
      }

      // Save the emotion log
      await _emotionRepository.addEmotionLog(emotionLog);
      
      return true;
    } catch (e) {
      // Log error for debugging
      return false;
    }
  }

  /// Log emotion with simplified parameters
  Future<bool> callSimple({
    required String userId,
    required String mood,
    required int intensity,
    String? note,
    List<String>? tags,
  }) async {
    final emotionLog = EmotionLog(
      id: '', // Will be generated by repository
      timestamp: DateTime.now(),
      mood: mood,
      intensity: intensity,
      note: note,
      userId: userId,
      tags: tags ?? [],
      type: EmotionLogType.manual,
    );

    return call(emotionLog);
  }

  /// Validate emotion log data
  EmotionLogValidationResult _validateEmotionLog(EmotionLog log) {
    // Check required fields
    if (log.mood.isEmpty) {
      return EmotionLogValidationResult(
        isValid: false,
        errorMessage: 'Mood cannot be empty',
      );
    }

    // Check intensity range
    if (log.intensity < 1 || log.intensity > 5) {
      return EmotionLogValidationResult(
        isValid: false,
        errorMessage: 'Intensity must be between 1 and 5',
      );
    }

    // Check timestamp is not in the future
    if (log.timestamp.isAfter(DateTime.now())) {
      return EmotionLogValidationResult(
        isValid: false,
        errorMessage: 'Timestamp cannot be in the future',
      );
    }

    // Check note length if provided
    if (log.note != null && log.note!.length > 500) {
      return EmotionLogValidationResult(
        isValid: false,
        errorMessage: 'Note cannot exceed 500 characters',
      );
    }

    // Check tags
    if (log.tags.length > 10) {
      return EmotionLogValidationResult(
        isValid: false,
        errorMessage: 'Cannot have more than 10 tags',
      );
    }

    return EmotionLogValidationResult(isValid: true);
  }
}

/// Result of emotion log validation
class EmotionLogValidationResult {
  final bool isValid;
  final String? errorMessage;

  EmotionLogValidationResult({
    required this.isValid,
    this.errorMessage,
  });
}